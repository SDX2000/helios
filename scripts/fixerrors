#!/usr/bin/python
import subprocess
import re
import shutil
from pipeline import *
import os
from os.path import join

dirStack = []

def pushd(path):
    curDir = os.getcwd()
    os.chdir(os.path.abspath(path))
    dirStack.append(os.path.abspath(curDir)) #it is safe to push the old value to the stack since chdir was successful
    
def popd():
    os.chdir(dirStack[-1])
    dirStack.pop() #it is safe to pop since chdir and access to last element in the stack was successful

kernel_base = os.environ['KERNEL_BASE']

if kernel_base == "":
    print "KERNEL_BASE is undefined"
    exit(1)

KRTD=join(kernel_base, "lib/krt")

SRCD= {
                                        
    join(kernel_base, "lib/Bkup/newlib-src/newlib/libc") : {"prefix" : ""},
    join(kernel_base, "lib/Bkup/newlib-src/newlib/libm") : {"prefix" : ""},
    "/home/sandeepd2/Source/osdev/gcc/build-gcc/gcc/include/" : {"prefix" : "include" }
}



def getTargetDir(filePath):
    print "filePath:", filePath
    for d in SRCD.keys():
        if filePath.startswith(d):
            prefix = SRCD[d]["prefix"]
            relPath = join(prefix, filePath[len(d)+1:])
            return os.path.dirname(join(KRTD, relPath))

def run(*cmd):
    l=[]
    for i, x in enumerate(cmd):
        if i == 0:
            l.extend(str(x).split())
        else:
            l.append(x)
    
    return subprocess.Popen(l, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0].split("\n")


def getMissingHeaderFiles():
    regexMissingFile = re.compile(".*fatal error: (.*): No such file or directory")
    missingFiles = []
    pushd(kernel_base)
    for line in run("scons"):
        m = regexMissingFile.match(line)
        
        if m is not None:
            print "Make file error:", line
            missingFiles.append(m.groups()[0])
    
    popd()
    return missingFiles
    

def fixMissingHeaderFiles():
    while True:
        #print "Entering:", KRTD
        pushd(KRTD)

        #Create a list of missing files
        missingFiles = getMissingHeaderFiles()

        if len(missingFiles) == 0:
            break
            
        print "Missing files: ", missingFiles

        #print "Entering:", NLD

        files = []
        for d in SRCD.keys():
            files.extend(run("find " + d))

        #print files

        chosenSubst = {}

        for mf in missingFiles:
            subst = files | grep("/"+ mf + "$") | tuple
            
            
            if len(subst) == 0:
                print "ERROR: could not find file - ", "/"+ mf + "$"
                continue
            
            if(len(subst) > 1):
                print "Please choose substitute file from :-"
                for i, s in enumerate(subst):
                    print i+1, ". ", s
                
                inp = int(raw_input())
                chosenSubst[mf] = subst[inp - 1]
            else:
                chosenSubst[mf] = subst[0]

        for orig, subst in chosenSubst.items():
            #print "shutil.copytree("+os.path.join(NLD , subst)+", "+KRTD+")"
            #src=os.path.join(NLD , subst)
            
            destDir = getTargetDir(subst)
            
            print "destDir:", destDir
            
            if not os.path.exists(destDir):
                print "Making dir: ", destDir
                os.makedirs(destDir)
            
            print "Copying file: %s to %s" % (subst, destDir) 
            shutil.copy(subst, destDir)
        
        print ""


def buildAndGetMissingRefs():
    regexMissingRef = re.compile("(.*):.*: undefined reference to \`(.*)\'")
    missingRefs = set()
    for line in run("make"):
        m = regexMissingRef.match(line)
        
        if m is not None:
            #print "Make file error:", line
            #missingRefs.append(m.groups())
            missingRefs.add(m.groups()[1])
    return missingRefs

if __name__ == "__main__":
    fixMissingHeaderFiles()
    print "Done!"
