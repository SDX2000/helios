#!/usr/bin/python
import subprocess
import re
import shutil
#from pipeline import *
import os
from os.path import join

import pprint


dirStack = []

def pushd(path):
    curDir = os.getcwd()
    os.chdir(os.path.abspath(path))
    dirStack.append(os.path.abspath(curDir)) #it is safe to push the old value to the stack since chdir was successful
    
def popd():
    os.chdir(dirStack[-1])
    dirStack.pop() #it is safe to pop since chdir and access to last element in the stack was successful

kernel_base = os.environ['KERNEL_BASE']

BUILDD=join(kernel_base, "src")

NLD=join(kernel_base, "lib/Bkup/newlib-src")
KRTD_OUT=join(kernel_base, "lib")

def run(*cmd):
    l=[]
    for i, x in enumerate(cmd):
        if i == 0:
            l.extend(str(x).split())
        else:
            l.append(x)
    
    #print "l:", l
    return subprocess.Popen(l, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0].split("\n")
    

def buildAndGetMissingRefs():
    regexMissingRef = re.compile("(.*):.*: undefined reference to \`(.*)\'")
    missingRefs = set()
    for line in run("scons"):
        m = regexMissingRef.match(line)
        
        if m is not None:
            print "Make file error:", line
            #missingRefs.append(m.groups())
            missingRefs.add(m.groups()[1])
    return missingRefs
    
    


pushd(BUILDD)
missingRefs = buildAndGetMissingRefs()
for ref in missingRefs:
    demangledName = run(join(kernel_base,"tools/demangle"), ref)[0]
    if demangledName == ref:
        print "Missing ref: ", ref #could not demangle print as is
    else:
        print "Missing ref: ", demangledName, " (", ref, ")" #print demangled name then the original in parens
popd()

pushd(NLD)
#find . -name "*.c*" | xargs grep "_DEFUN[ ]*(<symbol_name>"
#try to find C implementation files for the missing symbols if possible
for symb in missingRefs:
    r1 = re.compile("_DEFUN[ ]*\(" + symb)
    r2 = re.compile("weak_alias[ ]*\(.*"+symb)
    for fname in run("find . -name *.c*"):
        if os.path.exists(fname):
            f = open(fname, 'r')
            s = f.read()
            if r1.search(s) or r2.search(s):
                print "Symbol: \"" + symb + "\" found in: ", os.path.join(NLD, fname)

popd()

#try to locate the symbol in the kruntime library and display corresponding record
pushd(KRTD_OUT)
print "\nTrying to locate missing items in libkruntime.a\n"
for symb in missingRefs:
    rsymb = re.compile(".*%s.*" % symb)
    rund = re.compile(".*\*UND\*.*")
    for line in run("objdump -t libkruntime.a"):
        if rsymb.match(line) and not rund.match(line):
            print line
popd()
